give me an object that contains the string "search_for_users" as key and the translation of (Search for users) in the following languages de dk es it no se as a value, and a comment at the end of the line containing the language code as given

de dk es it no se

name should takke full width in drawer
change drawer background color

khass tkon nefs regex dial validation dial (username passwd ... etc) mabin backend w front
capitalize first & last name first letters

routes to do:
	1. search for profile by username
	2. consult profile (email hidden)
	3. edit profile
	4. Home (aflam + search)
	5. watch films

• The user must be able to register and connect via Omniauth.
• Disconnect with 1 click
• A film research field.

https://yts.torrentbay.to/api/v2/list_movies.json
/*******************************************/
III.2.2 Thumbnails
	• If a research has been done, the results will show as thumbnails sorted by names.
	• If no research was done, you will show the most popular medias from your external
		sources, sorted as per the criteria of your choice (downloads, peers, seeders, etc...)
	• In addition to the name of the video, a thumbnail must be composed, if available,
		of its production year, its IMDb note and a cover image.
	• You will differentiate the videos watched from unwatched, as you prefer.
	• The list will be paginated, at the end of each page. The following one must be
		automatically charged asynchronically. That means there cannot be a link from
		each page.
	• The page will be sortable and filtered according to criteria such as name, genre,
		the IMDb grade, the gap of production year etc...



[
	f :3000/search-users fach makil9a tachi user kay throwi error li khasseha tcatcha awla ki tall3 "Uncaught error"
]


search ki clignoti
ytb video responsv
slider
scale dial category f 'home' (overflow-x and -y)
fullscreen
-----------------------------------------------------
card themebackgrnd to be responsv
remove button to delete the profile image from :3000/user


// import styled from 'styled-components';
// 
// const withAs = (WrappedComponent, defaultAs = 'div') => {
//     return (props) => {
//         return <WrappedComponent {...props} as={props.as || defaultAs} />
//     }
// }
// 
// const StyledButton = styled.button`
//   /* styles for the button */
// `;
// 
// const DefaultButton = withAs(StyledButton);
// 
// const LinkButton = withAs(StyledButton, 'a');